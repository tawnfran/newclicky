{"version":3,"sources":["components/card/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","handleClick","id","front","height","width","style","onClick","className","alt","src","App","props","handleGuessRight","newData","topScore","state","score","newTopScore","Math","max","setState","data","mixUpData","handleGuessWrong","resetData","map","item","clicked","i","length","j","floor","random","temp","handleItemClick","rightGuess","newItem","this","pic","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m8BAKe,SAASA,EAAT,GAKH,IAJVC,EAIS,EAJTA,YACAC,EAGS,EAHTA,GACAC,EAES,EAFTA,MACAC,EACS,EADTA,OACAC,EAAS,EAATA,MAEA,OAAO,yBACLC,MAAO,CACLD,QAAOD,UAETG,QAAS,kBAAMN,EAAYC,KAE3B,yBAAKM,UAAU,YACb,yBAAKC,IAAI,GACPH,MAAO,CACLF,SAAQC,SAEVG,UAAW,QACXE,IAAKP,M,iBCkFEQ,E,YApGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KASRC,iBAAmB,SAAAC,GACjB,IAAMC,EAAW,EAAKC,MAAMD,SACtBE,EAAQ,EAAKD,MAAMC,MACnBC,EAAcC,KAAKC,IAAIH,EAAQ,EAAGF,GACxC,EAAKM,SAAS,CACZC,KAAM,EAAKC,UAAUT,GACrBG,MAAOA,EAAQ,EACfF,SAAUG,KAjBK,EAqBnBM,iBAAmB,SAAAF,GACjB,EAAKD,SAAS,CACZC,KAAM,EAAKG,UAAUH,GACrBL,MAAO,KAxBQ,EA4BnBQ,UAAY,SAAAH,GACV,IAAMG,EAAYH,EAAKI,KAAI,SAAAC,GAAI,sBAAUA,EAAV,CAAgBC,SAAS,OACxD,OAAO,EAAKL,UAAUE,IA9BL,EAgCnBF,UAAY,SAAAD,GAEV,IADA,IAAIO,EAAIP,EAAKQ,OAAS,EACfD,EAAI,GAAG,CACZ,IAAME,EAAIZ,KAAKa,MAAMb,KAAKc,UAAYJ,EAAI,IACpCK,EAAOZ,EAAKO,GAClBP,EAAKO,GAAKP,EAAKS,GACfT,EAAKS,GAAKG,EACVL,IAEF,OAAOP,GAzCU,EA2CnBa,gBAAkB,SAAAjC,GAChB,IAAIkC,GAAa,EACXtB,EAAU,EAAKE,MAAMM,KAAKI,KAAI,SAAAC,GAClC,IAAMU,EAAO,eAAQV,GAQrB,OAPIU,EAAQnC,KAAOA,IACZmC,EAAQT,UACXS,EAAQT,SAAU,EAClBQ,GAAa,IAIVC,MAEU,IAAfD,EACF,EAAKvB,iBAAiBC,GAEtB,EAAKU,iBAAiBV,IAzDxB,EAAKE,MAAQ,CAAEM,OAAML,MAAO,EAAGF,SAAU,GAFxB,E,iFAOjBuB,KAAKjB,SAAS,CAAEC,KAAMgB,KAAKf,UAAUe,KAAKtB,MAAMM,U,+BAwDxC,IAAD,OACP,OAEM,yBAAKd,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACf,qEAKF,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACf,yBAAKA,UAAU,SACf,wFACJ,gGAIE,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACf,uCAAa8B,KAAKtB,MAAMC,MAAxB,KACLqB,KAAKtB,MAAMM,KAAKI,KAAI,SAAAC,GAAI,OACvB,kBAAC3B,EAAD,CACEE,GAAIyB,EAAKzB,GACTG,MAAO,IACPD,OAAQ,IACRD,MAAOwB,EAAKY,IACZtC,YAAa,EAAKkC,6B,GA5FZK,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a2a611dc.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './style.css'\r\n\r\nexport default function Card({\r\n  handleClick,\r\n  id,\r\n  front,\r\n  height,\r\n  width }) {\r\n\r\n  return <div\r\n    style={{\r\n      width, height\r\n    }}\r\n    onClick={() => handleClick(id)}\r\n  >\r\n    <div className=\"pictures\">\r\n      <img alt=\"\"\r\n        style={{\r\n          height, width\r\n        }}\r\n        className={\"front\"}\r\n        src={front}\r\n      />\r\n\r\n\r\n    </div>\r\n  </div>\r\n}\r\n\r\nCard.propTypes = {\r\n  handleClick: PropTypes.func.isRequired,\r\n  id: PropTypes.number.isRequired,\r\n  front: PropTypes.string.isRequired,\r\n  height: PropTypes.number.isRequired,\r\n  width: PropTypes.number.isRequired,\r\n}","import React, { Component } from 'react';\nimport Card from './components/card';\nimport './App.css';\nimport data from './data.json';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { data, score: 0, topScore: 0 };\n  }\n\n\n  componentDidMount() {\n    this.setState({ data: this.mixUpData(this.state.data) })\n\n  }\n  handleGuessRight = newData => {\n    const topScore = this.state.topScore\n    const score = this.state.score\n    const newTopScore = Math.max(score + 1, topScore)\n    this.setState({\n      data: this.mixUpData(newData),\n      score: score + 1,\n      topScore: newTopScore,\n    })\n\n  }\n  handleGuessWrong = data => {\n    this.setState({\n      data: this.resetData(data),\n      score: 0\n    })\n\n  }\n  resetData = data => {\n    const resetData = data.map(item => ({ ...item, clicked: false }));\n    return this.mixUpData(resetData);\n  }\n  mixUpData = data => {\n    let i = data.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = data[i];\n      data[i] = data[j];\n      data[j] = temp;\n      i--;\n    }\n    return data;\n  };\n  handleItemClick = id => {\n    let rightGuess = false;\n    const newData = this.state.data.map(item => {\n      const newItem = { ...item }\n      if (newItem.id === id) {\n        if (!newItem.clicked) {\n          newItem.clicked = true;\n          rightGuess = true;\n\n        }\n      }\n      return newItem\n    })\n    if (rightGuess === true) {\n      this.handleGuessRight(newData)\n    } else {\n      this.handleGuessWrong(newData)\n    }\n\n  }\n  render() {\n    return (\n          // <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-12\">\n              <h2> Can you memorize these NBA teams? </h2>\n              </div>\n\n\n            </div>\n            <div className=\"row\">\n              <div className=\"col-12\">\n              <div className=\"col-6\">\n              <h4> Click on each team but don't click the same team twice!</h4>\n          <h4> The score will update accordingly, and reset when you lose!!</h4>\n              </div>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-12\">\n              <h3> Score: {this.state.score} </h3>\n        {this.state.data.map(item => (\n          <Card\n            id={item.id}\n            width={100}\n            height={100}\n            front={item.pic}\n            handleClick={this.handleItemClick}/>\n        ))}\n              </div>\n            </div>\n       </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}